/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Passenger.java
 *
 * Created on Mar 10, 2015, 4:25:38 AM
 */
package yblts;

import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Iam.CeJ
 */
public class Passenger extends javax.swing.JFrame {
    DefaultTableModel dtm = new DefaultTableModel();
int transaction = 0;
String status = "DELETED";
String type;
    /** Creates new form Passenger */
    public Passenger() {
        initComponents();
        displayTable();
        //txtPassNum.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        passTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPassNum = new javax.swing.JTextField();
        txtPassType = new javax.swing.JTextField();
        txtPassDiscount = new javax.swing.JTextField();
        searchType = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnsave = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Passenger Form", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 3, 12), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1360, 720));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setVerifyInputWhenFocusTarget(false);

        passTable.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        passTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Passenger ID", "Passenger Type", "Discount"
            }
        ));
        passTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(passTable);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(37, 18, 133));
        jLabel1.setText("Passenger ID:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(37, 18, 133));
        jLabel2.setText("Passenger Type:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(37, 18, 133));
        jLabel3.setText("Discount:");

        txtPassNum.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txtPassNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassNumActionPerformed(evt);
            }
        });

        txtPassType.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txtPassType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassTypeActionPerformed(evt);
            }
        });

        txtPassDiscount.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txtPassDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassDiscountActionPerformed(evt);
            }
        });

        searchType.setBackground(new java.awt.Color(255, 255, 255));
        searchType.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        searchType.setForeground(new java.awt.Color(37, 18, 133));
        searchType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yblts/Search2.png"))); // NOI18N
        searchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.lightGray, null, null));

        btnsave.setBackground(new java.awt.Color(255, 255, 255));
        btnsave.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(37, 18, 133));
        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        btndelete.setBackground(new java.awt.Color(255, 255, 255));
        btndelete.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btndelete.setForeground(new java.awt.Color(37, 18, 133));
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnexit.setBackground(new java.awt.Color(255, 255, 255));
        btnexit.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnexit.setForeground(new java.awt.Color(37, 18, 133));
        btnexit.setText("Exit");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnsave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btndelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnexit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsave)
                    .addComponent(btndelete)
                    .addComponent(btnexit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setFont(new java.awt.Font("Showcard Gothic", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 153));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yblts/images.jpg"))); // NOI18N
        jLabel9.setText("YBL Ticketing System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 173, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtPassDiscount, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassNum)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPassType, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(38, 38, 38)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassNum, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassType, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchType))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passTableMouseClicked
        transaction=1;
        txtPassNum.setText(dtm.getValueAt(passTable.getSelectedRow(),0).toString());
        txtPassType.setText(dtm.getValueAt(passTable.getSelectedRow(),1).toString());
        txtPassDiscount.setText(dtm.getValueAt(passTable.getSelectedRow(),2).toString());
        txtPassNum.setEnabled(false);
}//GEN-LAST:event_passTableMouseClicked

    private void txtPassNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassNumActionPerformed
        
}//GEN-LAST:event_txtPassNumActionPerformed

    private void txtPassTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassTypeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtPassTypeActionPerformed

    private void txtPassDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassDiscountActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtPassDiscountActionPerformed

    private void searchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeActionPerformed
        type = txtPassType.getText().toString().trim();
        displayTableSearch();
        clearFields();
}//GEN-LAST:event_searchTypeActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        if (transaction==1) {
            if(txtPassNum.getText().length()>0
                    &&txtPassType.getText().length()>0
                    &&txtPassDiscount.getText().length()>0) {
                updatePass();
                clearFields();
                displayTable();
                txtPassNum.setEnabled(true);
                transaction=0;
            } else{
                JOptionPane.showMessageDialog(null,"Some Fields Are Empty");
            }
        }
        
        else {
            if(txtPassNum.getText().length()>0
                    &&txtPassType.getText().length()>0
                    &&txtPassDiscount.getText().length()>0){
                
                addPass();
                displayTable();
                
            } else{
                JOptionPane.showMessageDialog(null,"Some Fields Are Empty");
            }
            
        }
}//GEN-LAST:event_btnsaveActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        int x = passTable.getSelectedRow();
        
        if(txtPassNum.getText().length()>0
                &&txtPassType.getText().length()>0
                &&txtPassDiscount.getText().length()>0) {
            deletePass(dtm.getValueAt(x,0).toString());
            dtm.removeRow(passTable.getSelectedRow());
            clearFields();
            txtPassNum.setEnabled(true);
        }
        
        else{
            JOptionPane.showMessageDialog(null,"Select row from table to delete!");
        }
}//GEN-LAST:event_btndeleteActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        Home as = new Home();
        as.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Passenger().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnsave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable passTable;
    private javax.swing.JButton searchType;
    private javax.swing.JTextField txtPassDiscount;
    private javax.swing.JTextField txtPassNum;
    private javax.swing.JTextField txtPassType;
    // End of variables declaration//GEN-END:variables

    private void displayTable() {
        YBLTSconnectionDB d = new YBLTSconnectionDB();
    d.main();
    Statement stmt = null;
    String sql;  
        
    try {
            stmt=(Statement) d.conn.createStatement();
            sql="SELECT Passenger_Num,Passenger_Type,Discount FROM passenger WHERE Status IS NULL "; 
            ResultSet rs = stmt.executeQuery(sql);
             
             dtm = new DefaultTableModel();
             passTable.setModel(dtm);
             dtm.addColumn("Passenger ID");
             dtm.addColumn("Passenger Type");
             dtm.addColumn("Discount");
             while(rs.next()){
               Object[] ob = {
               rs.getString("Passenger_Num"),
               rs.getString("Passenger_Type"),
               rs.getString("Discount")
               };
               dtm.addRow(ob);
               
             }
        } catch (SQLException ex) {
            Logger.getLogger(Passenger.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    private void displayTableSearch() {
        YBLTSconnectionDB d = new YBLTSconnectionDB();
     d.main();
  
     
    Statement stmt = null;
    String sql;  
    String stats = null;    
    try {
            stmt=(Statement) d.conn.createStatement();
           sql="SELECT Passenger_Num,Passenger_Type,Discount FROM passenger WHERE Passenger_Type LIKE '"+txtPassType.getText().toString()+"%' AND Status IS NULL ";
            
           ResultSet rs = stmt.executeQuery(sql);
             
             dtm = new DefaultTableModel();
             passTable.setModel(dtm);
             dtm.addColumn("Passenger ID");
             dtm.addColumn("Passenger Type");
             dtm.addColumn("Discount");
             while(rs.next()){
               Object[] ob = {
               rs.getString("Passenger_Num"),
               rs.getString("Passenger_Type"),
               rs.getString("Discount")
               };
               dtm.addRow(ob);
               
             }
        } catch (SQLException ex) {
            Logger.getLogger(Passenger.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

    private void clearFields() {
        txtPassNum.setText(null);
       txtPassType.setText(null);
       txtPassDiscount.setText(null);
    }

    private void updatePass() {
        int x = passTable.getSelectedRow();
        String PK = dtm.getValueAt(x,0).toString(); 
        String PassID = txtPassNum.getText();
        String PassType = txtPassType.getText();
        String Discount = txtPassDiscount.getText();
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        PreparedStatement stmt = null;
        String sql;

        try {
         sql = "UPDATE `yellowbusdb`.`passenger` SET `Passenger_Type`=?,`Discount`=?,`Passenger_Num`=? WHERE `Passenger_Num`=?";
         stmt = (PreparedStatement) d.conn.prepareStatement(sql);   
         
         
         stmt.setString(1, PassType);
         stmt.setString(2, Discount);
         stmt.setString(3, PassID);
         stmt.setString(4, PK);
    
         int success = stmt.executeUpdate();
         if (success == 1) {
        System.out.println("success");
         dtm.setValueAt(PK, passTable.getSelectedRow(), 0);       
         dtm.setValueAt(PassType, passTable.getSelectedRow(), 1);
         dtm.setValueAt(Discount, passTable.getSelectedRow(), 2);
         
         
        }}catch (SQLException ex) {
        Logger.getLogger(Bus.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    private void addPass() {
        String PassID = txtPassNum.getText();
        String PassType = txtPassType.getText();
        String Discount = txtPassDiscount.getText();
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        Statement stmt = null;
        String sql;
    try {        
        stmt=(Statement) d.conn.createStatement();
        sql="SELECT * FROM passenger WHERE Passenger_Num = '"+PassID+"' and Status IS NULL "; 
        ResultSet rs = stmt.executeQuery(sql);
        
        if(!rs.isBeforeFirst())
        {
           
          stmt= (Statement) d.conn.createStatement();
          sql="INSERT INTO `yellowbusdb`.`passenger`(`Passenger_Num`,`Passenger_Type`,`Discount`)VALUES('"+PassID+"','"+PassType+"','"+Discount+"');";
         
          int success = stmt.executeUpdate(sql);
          clearFields();
          if(success==1){
          System.out.println("success");
          
          }
        
        }
        else{
             JOptionPane.showMessageDialog(null,"Duplicate Passenger Number!");
             txtPassNum.setText(null);
             txtPassNum.requestFocus();
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(Bus.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    private void deletePass(String toString) {
        String[] buttons = {"YES","NO"};
    int returnValue = JOptionPane.showOptionDialog(null,"Do You Want To Delete The Records?", "NARRATIVE",
            JOptionPane.WARNING_MESSAGE,0,null,buttons,buttons);
    System.out.print(returnValue);

    if(returnValue==JOptionPane.YES_OPTION){ 
    int x = passTable.getSelectedRow();
        String PK = dtm.getValueAt(x,0).toString(); 
        String PassID = txtPassNum.getText();
        String PassType = txtPassType.getText();
        String Discount = txtPassDiscount.getText();
        
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        PreparedStatement stmt = null;
        String sql;
        

        try {
         sql = "UPDATE `yellowbusdb`.`passenger` SET `Passenger_Type`=?,`Discount`=?,`Passenger_Num`=?,`Status`=? WHERE `Passenger_Num`=?";       
         stmt = (PreparedStatement) d.conn.prepareStatement(sql);   
         
         
         stmt.setString(1, PassType);
         stmt.setString(2, Discount);
         stmt.setString(3, PassID);
         stmt.setString(4, status);
         stmt.setString(5, PK);
         
         int success = stmt.executeUpdate();
        
        }catch (SQLException ex) {
        Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
      else{
        this.dispose();
        yblts.Bus as = new yblts.Bus();
        as.setVisible(true);
    }
    }
}
