package yblts;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import yblts.Home;
import yblts.YBLTSconnectionDB;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aerole
 */
public class Employee extends javax.swing.JFrame {

    /**
     * Creates new form Employee
     */
    
DefaultTableModel dtm = new DefaultTableModel();
int transaction = 0;
String status = "DELETED";
String nameS;
    public Employee() {
        initComponents();
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        empid = new javax.swing.JTextField();
        empmname = new javax.swing.JTextField();
        empfname = new javax.swing.JTextField();
        jbd = new javax.swing.JTextField();
        emplname = new javax.swing.JTextField();
        sbtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnsave = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1360, 720));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Form", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 3, 12), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setVerifyInputWhenFocusTarget(false);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        table.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Empoyee ID", "Firs Name", "Middle Name", "Last Name", "Job Description"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(37, 18, 133));
        jLabel1.setText("Employee ID:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(37, 18, 133));
        jLabel2.setText("First Name:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(37, 18, 133));
        jLabel3.setText("Middle Name:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(37, 18, 133));
        jLabel4.setText("Last Name:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(37, 18, 133));
        jLabel5.setText("Job Description:");

        empid.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        empid.setForeground(new java.awt.Color(37, 18, 133));

        empmname.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        empmname.setForeground(new java.awt.Color(37, 18, 133));

        empfname.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        empfname.setForeground(new java.awt.Color(37, 18, 133));

        jbd.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jbd.setForeground(new java.awt.Color(37, 18, 133));
        jbd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbdActionPerformed(evt);
            }
        });

        emplname.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        emplname.setForeground(new java.awt.Color(37, 18, 133));
        emplname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emplnameActionPerformed(evt);
            }
        });

        sbtn.setBackground(new java.awt.Color(255, 255, 255));
        sbtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        sbtn.setForeground(new java.awt.Color(37, 18, 133));
        sbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yblts/Search2.png"))); // NOI18N
        sbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbtnActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Showcard Gothic", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 153));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yblts/images.jpg"))); // NOI18N
        jLabel9.setText("YBL Ticketing System");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.lightGray, null, null));

        btnsave.setBackground(new java.awt.Color(255, 255, 255));
        btnsave.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(37, 18, 133));
        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        btnDel.setBackground(new java.awt.Color(255, 255, 255));
        btnDel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnDel.setForeground(new java.awt.Color(37, 18, 133));
        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnexit.setBackground(new java.awt.Color(255, 255, 255));
        btnexit.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnexit.setForeground(new java.awt.Color(37, 18, 133));
        btnexit.setText("Exit");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnsave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDel)
                .addGap(6, 6, 6)
                .addComponent(btnexit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsave)
                    .addComponent(btnexit)
                    .addComponent(btnDel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(empmname, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(empfname)
                            .addComponent(empid)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbd, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(emplname, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(116, 116, 116))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(352, 352, 352)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(73, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(empfname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(empmname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(emplname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sbtn))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1380, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
     transaction=1;
       empid.setText(dtm.getValueAt(table.getSelectedRow(),0).toString()); 
       empfname.setText(dtm.getValueAt(table.getSelectedRow(),1).toString());
       empmname.setText(dtm.getValueAt(table.getSelectedRow(),2).toString());
       emplname.setText(dtm.getValueAt(table.getSelectedRow(),3).toString());
       jbd.setText(dtm.getValueAt(table.getSelectedRow(),4).toString());
       empid.setEnabled(false);
    }//GEN-LAST:event_tableMouseClicked

    private void sbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbtnActionPerformed
        nameS = empfname.getText().toString().trim();
        displayTableSearch();
        clearFields();
    }//GEN-LAST:event_sbtnActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
      if (transaction==1)
        { 
        if(empid.getText().length()>0 
                 &&empfname.getText().length()>0
                 &&empmname.getText().length()>0
                 &&emplname.getText().length()>0
                 &&jbd.getText().length()>0){
        updateEmployee();
        clearFields();
        displayTable();
        empid.setEnabled(true);
        transaction=0;
        }
         else{
          JOptionPane.showMessageDialog(null,"Some Fields Are Empty");   
         }
        }
        
        else
        {       
         if(empid.getText().length()>0 
                 &&empfname.getText().length()>0
                 &&empmname.getText().length()>0
                 &&emplname.getText().length()>0
                 &&jbd.getText().length()>0){
         addEmployee();
         displayTable(); 
         clearFields();
         }
         else{
          JOptionPane.showMessageDialog(null,"Some Fields Are Empty");   
         }
       
        }
       
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        int x = table.getSelectedRow();
        if(empid.getText().length()>0 
                 &&empfname.getText().length()>0
                 &&empmname.getText().length()>0
                 &&emplname.getText().length()>0
                 &&jbd.getText().length()>0){
        deleteEmployee(dtm.getValueAt(x,0).toString());
        dtm.removeRow(table.getSelectedRow());
        clearFields();
        empid.setEnabled(true);
        }
        
        else JOptionPane.showMessageDialog(null,"Select row from table to delete!"); 
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        Home as = new Home();
       as.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    private void jbdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbdActionPerformed

    private void emplnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emplnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emplnameActionPerformed
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnsave;
    private javax.swing.JTextField empfname;
    private javax.swing.JTextField empid;
    private javax.swing.JTextField emplname;
    private javax.swing.JTextField empmname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jbd;
    private javax.swing.JButton sbtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
private void addEmployee() {
        String id = empid.getText();
        String fname = empfname.getText();
        String mname = empmname.getText();
        String lname= emplname.getText();
         String jd = jbd.getText();
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        Statement stmt = null;
        String sql;
        
         try{
          stmt=d.conn.createStatement();
          sql="SELECT * FROM employee WHERE (Employee_ID ='"+id+"' OR Employee_FName='"+fname+"' AND Employee_Mname='"+mname+"' AND Emp_Lname='"+lname+"') AND Status IS NULL ";
          ResultSet rs = stmt.executeQuery(sql); 
          
             
          if(!rs.isBeforeFirst())
        {
          stmt=d.conn.createStatement();
          sql="INSERT INTO `yellowbusdb`.`employee`(`Employee_ID`,`Employee_FName`,`Employee_Mname`,`Emp_Lname`,`Job_Description`)VALUES('"+id+"','"+fname+"','"+mname+"','"+lname+"','"+jd+"');";
         
          int success = stmt.executeUpdate(sql);
          clearFields();
          if(success==1){
          System.out.println("success");
          }
          }
          
          else{ 
             sql="SELECT * FROM employee WHERE Employee_ID ='"+id+"' AND AND Status IS NULL ";
             JOptionPane.showMessageDialog(null,"Duplicate Entry!");
             empid.setText(null);
             empfname.setText(null);
             empmname.setText(null);
             emplname.setText(null);
             empid.requestFocus(); 
          }
        }catch(SQLException ex) {
              Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
              }          
    }  
    

    private void updateEmployee() {
       
        int x = table.getSelectedRow();
        String PK = dtm.getValueAt(x,0).toString(); 
        String id = empid.getText();
        String fname = empfname.getText();
        String mname = empmname.getText();
        String lname = emplname.getText();
        String jd = jbd.getText();
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        PreparedStatement stmt = null;
        String sql;

        try {
         sql = "UPDATE `yellowbusdb`.`employee` SET `Employee_Fname`=?,`Employee_Mname`=?,`Emp_Lname`=?,`Job_Description`=?,`Employee_ID`=? WHERE `Employee_ID`=?";
         stmt = d.conn.prepareStatement(sql);   
         
         
         stmt.setString(1, fname);
         stmt.setString(2, mname);
         stmt.setString(3, lname);
         stmt.setString(4, jd);
         stmt.setString(5, id);
         stmt.setString(6, PK);
    
         int success = stmt.executeUpdate();
         if (success == 1) {
        System.out.println("success");
         dtm.setValueAt(PK, table.getSelectedRow(), 0);       
         dtm.setValueAt(fname, table.getSelectedRow(), 1);
         dtm.setValueAt(mname, table.getSelectedRow(), 2);
         dtm.setValueAt(lname, table.getSelectedRow(), 3);
         dtm.setValueAt(jd, table.getSelectedRow(), 4);
         
        }}catch (SQLException ex) {
        Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void deleteEmployee(String toString) {
    String[] buttons = {"YES","NO"};
    int returnValue = JOptionPane.showOptionDialog(null,"Do You Want To Delete The Records?", "NARRATIVE",
            JOptionPane.WARNING_MESSAGE,0,null,buttons,buttons);
    System.out.print(returnValue);

    if(returnValue==JOptionPane.YES_OPTION){ 
    int x = table.getSelectedRow();
        String PK = dtm.getValueAt(x,0).toString(); 
        String id = empid.getText();
        String fname = empfname.getText();
        String mname = empmname.getText();
        String lname = emplname.getText();
        String jd = jbd.getText();
        
        YBLTSconnectionDB d = new YBLTSconnectionDB();
        d.main();
        PreparedStatement stmt = null;
        String sql;
        

        try {
         sql = "UPDATE `yellowbusdb`.`employee` SET `Employee_Fname`=?,`Employee_Mname`=?,`Emp_Lname`=?,`Job_Description`=?,`Employee_ID`=?,`Status`=? WHERE `Employee_ID`=?";       
         stmt = d.conn.prepareStatement(sql);   
         
         
         stmt.setString(1, fname);
         stmt.setString(2, mname);
         stmt.setString(3, lname);
         stmt.setString(4, jd);
         stmt.setString(5, id);
         stmt.setString(6, status);
         stmt.setString(7, PK);
    
         int success = stmt.executeUpdate();
        
        }catch (SQLException ex) {
        Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
      else{
        this.dispose();
        yblts.Employee as = new yblts.Employee();
        as.setVisible(true);
    }
    }    
  
    

    private void displayTable() {
       
    YBLTSconnectionDB d = new YBLTSconnectionDB();
     d.main();
  
    Statement stmt = null;
    String sql;  
    String stats = null;    
    try {
            stmt=d.conn.createStatement();
            sql="SELECT Employee_ID,Employee_Fname,Employee_Mname,Emp_Lname,Job_Description FROM employee WHERE Status IS NULL ";
            ResultSet rs = stmt.executeQuery(sql);
             
             dtm = new DefaultTableModel();
             table.setModel(dtm);
             dtm.addColumn("Employee ID");
             dtm.addColumn("First Name");
             dtm.addColumn("Middle Name");
             dtm.addColumn("Last Name");
             dtm.addColumn("Job Description");
             
             while(rs.next()){
               Object[] ob = {
               rs.getString("Employee_ID"),
               rs.getString("Employee_Fname"),
               rs.getString("Employee_Mname"),
               rs.getString("Emp_Lname") ,     
                rs.getString("Job_Description")     
               };
               dtm.addRow(ob);
               
             }
        } catch (SQLException ex) {
            Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
        }     
    
    
    }

    private void clearFields() {
    empid.setText(null);
    empfname.setText(null);
    empmname.setText(null);
    emplname.setText(null);
    jbd.setText(null);
    }

    private void displayTableSearch() {
     YBLTSconnectionDB d = new YBLTSconnectionDB();
     d.main();
  
     
    Statement stmt = null;
    String sql;  
    String stats = null;    
    try {
            stmt=d.conn.createStatement();
            sql="SELECT Employee_ID,Employee_Fname,Employee_Mname,Emp_Lname,Job_Description FROM employee WHERE Emp_Lname LIKE '"+emplname.getText().toString()+"%' AND Status IS NULL  ";
            
            
            ResultSet rs = stmt.executeQuery(sql);
             
             dtm = new DefaultTableModel();
             table.setModel(dtm);
             dtm.addColumn("Employee ID");
             dtm.addColumn("First Name");
             dtm.addColumn("Middle Name");
             dtm.addColumn("Last Name");
             dtm.addColumn("Job Description");
             
             while(rs.next()){
               Object[] ob = {
               rs.getString("Employee_ID"),
               rs.getString("Employee_Fname"),
               rs.getString("Employee_Mname"),
               rs.getString("Emp_Lname") ,     
                rs.getString("Job_Description")     
               };
               dtm.addRow(ob);
               
             }
        } catch (SQLException ex) {
            Logger.getLogger(yblts.Employee.class.getName()).log(Level.SEVERE, null, ex);
        }     
       
    }


}
